# [ 함수(Function) ]-------------------------------------------------------------------------------------
# 자주 사용하는 기능을 묶어서 이름을 붙여 놓은 것.
# 코드 재사용 위함.
# <형태>
# def 함수명(재료,...,재료n):
# 코드
# return 결과

# [ 함수 만들어보기 ]------------------------------------------------------------------------------------------------
# 기        능  : 숫자 2개 더한 후 결과를 돌려 주는 기능.
# 함   수   명  : addTwo
# 재료(매개변수) : num1,num2
# 결과(반환값)   : 더한 값
# HISTORY : 2022-076-23 So create
#           2022-076-24 Park create
# 위처럼 회사마다 함수 생성 양식이 존재함.

def addTwo(num1,num2):
    value=num1+num2
    return value
# 함수 사용하기: 함수 호출
a=addTwo(10,20)
# 화면 출력하기: print(데이터)
print(a)

# [ 함수 도움말 설정하기 ]-------------------------------------------------------------------------------------
# 함수명 아래줄에 ''''''적고 엔터를 사용하면 자동 설명작성구조가 생성되어 작성자가 자료형이나 한글설명을 추가할 수 있다.
def addTwo(num1,num2):
    '''
    한글설명란 ex)숫자 2개 더한 후 결과 반환
    :param num1: 자료형 int
    :param num2: 자료형 int
    :return: 자료형 int
    '''
    value=num1+num2
    return value

# [ return을 사용하지 않고 함수 코드에 print()를 사용할 경우 ]----------------------------------------------------
def add(num1,num2):
    value=num1+num2
    print(value)
b=add(10,20) #-> return이 없어 돌려받는 값이 없기 때문에 b에 결과값이 저장되지 않는다.
print(b) #-> None이 출력된다.

# [문제 1]--------------------------------------------------------------------------------------------------
# 기    능: 문자 2개 더하는 기능의 함수
# 함 수 명: addStr
# 재    료: str1,str2
# 반    환: str1+str2
#----------------------------------------------------------------------------------------------------------
def addStr(str1,str2):
    return str1+str2 #메모리 줄이기 위해 간략하게
print(f"[ 문제1: 문자 2개 더하는 기능 함수 만들기 ]\n{addStr('ap','ple')}")

# [문제 2]--------------------------------------------------------------------------------------------------
# 기    능: 원하는 단의 구구단을 출력하는 기능의 함수
# 함 수 명: gugudan
# 재    료: num
# 반    환: 없음.
#----------------------------------------------------------------------------------------------------------
def gugudan(num):
    for i in range(1,10):
        print(f"{num}*{i}={num*i}")
print("[ 문제2: 구구단 출력 ]")
gugudan(2)

# [ 가변인자 ]-----------------------------------------------------------------------------------------------
# 인자 개수가 미정인 경우(매개변수 0개 ~ n개 인자)
# 유사하거나 동일한 코드 부분
# 형태 : *매개변수
# ! **매개변수 : 키워드 파라미터로 dict 형태에서 주로 사용.
def addNum(*nums):
    print(f'nums type:{type(nums)}') # 튜플 타입 확인
    total=0
    for num in nums: total= total+num
    return total
print(addNum(1,2,3,4))

# [ 문제3 ]--------------------------------------------------------------------------------------------------
# 기    능: 평균 구하는 함수
# 함 수 명: getAvg
# 파라미터: 과목명-점수 유동적 => **subject
# 반    환: 평균 ->  float
#-----------------------------------------------------------------------------------------------------------
def getAvg(**sub):
    print(f'sub type:{type(sub)}') # dict 타입 확인
    values=sub.values() # keys,values,items 중 하나 사용해야 함.
    total=0
    for value in values : total = total + value
    return total / len(values) if len(values)>0 else  None # 0보다 크면 나누기, 아니면 None
print(getAvg(국어=12, 수학=23, 과학=80)) # 키워드 파라미터는 따옴표 사용하지 말 것.

# [ 함수의 데이터 타입 ]----------------------------------------------------------------------------------------
# school Function
print(type(addNum)) # -> school'function'

# 함수를 list 형태로 사용할 수도 있다.
list=[addNum, getAvg]
print(list[0](1,2))
print(list[1](국어=12, 수학=23, 과학=80))

# [ lambda 함수 ]--------------------------------------------------------------------------------------------
# 익명 함수
# 한 줄 안에 간편하게 사용하기 위해 사용
# 형태 : lambda